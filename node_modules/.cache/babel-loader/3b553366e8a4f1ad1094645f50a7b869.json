{"remainingRequest":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/babel-loader/lib/index.js!/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/eslint-loader/index.js??ref--13-0!/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/src/core/services/store/store.js","dependencies":[{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/src/core/services/store/store.js","mtime":1595045714591},{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/cache-loader/dist/cjs.js","mtime":1594863441194},{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/babel-loader/lib/index.js","mtime":1594863441191},{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/eslint-loader/index.js","mtime":1594863450993}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/src/core/services/store/store.js"],"names":["db","state","name","lastName","country","email","id","users","getters","actions","getEditId","dispatch","collection","doc","delete","console","log","getUsers","commit","get","snapshot","forEach","eventoData","data","updateUsers","update","Name","LastName","Country","Email","deleteUser","addUsers","add","mutations","setName","actionName","setLastName","actionLastName","setCountry","actionCountry","setEmail","actionEmail","setId","actionid","allUsers","actionUsers","clearDataUsers","cleanUsers","actionClean","modules"],"mappings":"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","sourcesContent":["import { db } from \"../../../main\";\r\n\r\nexport default {\r\n  state: {\r\n    name: null,\r\n    lastName: null,\r\n    country: null,\r\n    email: null,\r\n    id: null,\r\n    users: []\r\n  },\r\n  getters: {\r\n    id: state => state.id,\r\n    name: state => state.name,\r\n    lastName: state => state.lastName,\r\n    country: state => state.country,\r\n    email: state => state.email,\r\n    users: state => state.users,\r\n  },\r\n  actions: {\r\n    getEditId: async function ({ dispatch }) {\r\n      try {\r\n        await db\r\n          .collection(\"user\")\r\n          .doc(this.state.id)\r\n          .delete();\r\n        dispatch('getUsers');\r\n      } catch (error) {\r\n        console.log(\"Error deleteEvent is-> \", error);\r\n      }\r\n    },\r\n    getUsers: async function ({ commit }) {\r\n      try {\r\n        commit('cleanUsers', [])\r\n        const snapshot = await db.collection(\"user\").get();\r\n\r\n        snapshot.forEach(doc => {\r\n          let eventoData = doc.data();\r\n          eventoData.id = doc.id;\r\n          commit('allUsers', eventoData)\r\n        });\r\n      } catch (error) {\r\n        console.log(\"Error getEvent is-> \", error);\r\n      }\r\n    },\r\n    updateUsers: async function ({ commit, dispatch }) {\r\n      console.log('name??????????',this.state.name,'lastName',this.state.lastName)\r\n      try {\r\n        await db\r\n          .collection(\"user\")\r\n          .doc(this.state.id)\r\n          .update({\r\n            Name: this.state.name,\r\n            LastName: this.state.lastName,\r\n            Country: this.state.country,\r\n            Email: this.state.email\r\n          });\r\n        commit('clearDataUsers')\r\n        dispatch('getUsers');\r\n      } catch (error) {\r\n        console.log(\"Error updateEvent is-> \", error);\r\n      }\r\n    },\r\n    deleteUser: async function ({ dispatch }) {\r\n      try {\r\n        console.log('id--->', this.state.id)\r\n        await db\r\n          .collection(\"user\")\r\n          .doc(this.state.id)\r\n          .delete();\r\n        dispatch('getUsers');\r\n      } catch (error) {\r\n        console.log(\"Error deleteEvent is-> \", error);\r\n      }\r\n    },\r\n    addUsers: async function ({ commit, dispatch }) {\r\n      try {\r\n        if (this.state.name && this.state.lastName && this.state.country && this.state.email) {\r\n          await db.collection(\"user\").add({\r\n            Name: this.state.name,\r\n            LastName: this.state.lastName,\r\n            Country: this.state.country,\r\n            Email: this.state.email\r\n          });\r\n          commit('clearDataUsers')\r\n          dispatch('getUsers');\r\n\r\n        } else {\r\n          console.log(\"Campos Oblicatorios\");\r\n        }\r\n      } catch (error) {\r\n        console.log(\"Error addEvent is-> \", error);\r\n      }\r\n    }\r\n  },\r\n  mutations: {\r\n    setName(state, actionName) {\r\n      this.state.name = actionName;\r\n    },\r\n    setLastName(state, actionLastName) {\r\n      this.state.lastName = actionLastName;\r\n    },\r\n    setCountry(state, actionCountry) {\r\n      this.state.country = actionCountry;\r\n    },\r\n    setEmail(state, actionEmail) {\r\n      this.state.email = actionEmail;\r\n    },\r\n    setId(state, actionid) {\r\n      this.state.id = actionid;\r\n    },\r\n    allUsers(state, actionUsers) {\r\n      state.users = [...state.users, actionUsers]\r\n    },\r\n\r\n    clearDataUsers() {\r\n      this.state.name = null,\r\n        this.state.lastName = null,\r\n        this.state.country = null,\r\n        this.state.email = null\r\n    },\r\n    cleanUsers(state, actionClean) {\r\n      state.users = actionClean\r\n    }\r\n  },\r\n  modules: {\r\n    // user,\r\n  }\r\n};\r\n"]}]}