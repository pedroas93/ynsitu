{"remainingRequest":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/src/view/layout/header/Topbar.vue?vue&type=template&id=14073b7c&","dependencies":[{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/src/view/layout/header/Topbar.vue","mtime":1595045714658},{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/cache-loader/dist/cjs.js","mtime":1594863441194},{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1594863453662},{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/cache-loader/dist/cjs.js","mtime":1594863441194},{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/vue-loader/lib/index.js","mtime":1594863453662}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}