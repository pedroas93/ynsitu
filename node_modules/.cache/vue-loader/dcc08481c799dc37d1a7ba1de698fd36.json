{"remainingRequest":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/src/view/pages/auth/Login.vue?vue&type=style&index=0&id=07be73ee&lang=scss&scoped=true&","dependencies":[{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/src/view/pages/auth/Login.vue","mtime":1595045714664},{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/css-loader/dist/cjs.js","mtime":1594863452413},{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1594863453662},{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/postcss-loader/src/index.js","mtime":1594863453465},{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/sass-loader/dist/cjs.js","mtime":1594864883053},{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/cache-loader/dist/cjs.js","mtime":1594863441194},{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/vue-loader/lib/index.js","mtime":1594863453662}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouc3Bpbm5lci5zcGlubmVyLXJpZ2h0IHsNCiAgcGFkZGluZy1yaWdodDogMy41cmVtICFpbXBvcnRhbnQ7DQp9DQo="},{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgHA;AACA;AACA","file":"Login.vue","sourceRoot":"src/view/pages/auth","sourcesContent":["<template>\r\n  <div>\r\n    <!--begin::Content header-->\r\n    <div\r\n      class=\"position-absolute top-0 right-0 text-right mt-5 mb-15 mb-lg-0 flex-column-auto justify-content-center py-5 px-10\"\r\n    >\r\n      <span class=\"font-weight-bold font-size-3 text-dark-60\">\r\n        Don't have an account yet?\r\n      </span>\r\n      <router-link\r\n        class=\"font-weight-bold font-size-3 ml-2\"\r\n        :to=\"{ name: 'register' }\"\r\n      >\r\n        Sign Up!\r\n      </router-link>\r\n    </div>\r\n    <!--end::Content header-->\r\n\r\n    <!--begin::Signin-->\r\n    <div class=\"login-form login-signin\">\r\n      <div class=\"text-center mb-10 mb-lg-20\">\r\n        <h3 class=\"font-size-h1\">Sign In</h3>\r\n        <p class=\"text-muted font-weight-semi-bold\">\r\n          Enter your username and password\r\n        </p>\r\n      </div>\r\n\r\n      <!--begin::Form-->\r\n      <b-form class=\"form\" @submit.stop.prevent=\"onSubmit\">\r\n        <div role=\"alert\" class=\"alert alert-info\">\r\n          <div class=\"alert-text\">\r\n            Use account <strong>admin@demo.com</strong> and password\r\n            <strong>demo</strong> to continue.\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          role=\"alert\"\r\n          v-bind:class=\"{ show: errors.length }\"\r\n          class=\"alert fade alert-danger\"\r\n        >\r\n          <div class=\"alert-text\" v-for=\"(error, i) in errors\" :key=\"i\">\r\n            {{ error }}\r\n          </div>\r\n        </div>\r\n\r\n        <b-form-group\r\n          id=\"example-input-group-1\"\r\n          label=\"\"\r\n          label-for=\"example-input-1\"\r\n        >\r\n          <b-form-input\r\n            class=\"form-control form-control-solid h-auto py-5 px-6\"\r\n            id=\"example-input-1\"\r\n            name=\"example-input-1\"\r\n            v-model=\"$v.form.email.$model\"\r\n            :state=\"validateState('email')\"\r\n            aria-describedby=\"input-1-live-feedback\"\r\n          ></b-form-input>\r\n\r\n          <b-form-invalid-feedback id=\"input-1-live-feedback\">\r\n            Email is required and a valid email address.\r\n          </b-form-invalid-feedback>\r\n        </b-form-group>\r\n\r\n        <b-form-group\r\n          id=\"example-input-group-2\"\r\n          label=\"\"\r\n          label-for=\"example-input-2\"\r\n        >\r\n          <b-form-input\r\n            class=\"form-control form-control-solid h-auto py-5 px-6\"\r\n            type=\"password\"\r\n            id=\"example-input-2\"\r\n            name=\"example-input-2\"\r\n            v-model=\"$v.form.password.$model\"\r\n            :state=\"validateState('password')\"\r\n            aria-describedby=\"input-2-live-feedback\"\r\n          ></b-form-input>\r\n\r\n          <b-form-invalid-feedback id=\"input-2-live-feedback\">\r\n            Password is required.\r\n          </b-form-invalid-feedback>\r\n        </b-form-group>\r\n\r\n        <!--begin::Action-->\r\n        <div\r\n          class=\"form-group d-flex flex-wrap justify-content-between align-items-center\"\r\n        >\r\n          <a\r\n            href=\"#\"\r\n            class=\"text-dark-60 text-hover-primary my-3 mr-2\"\r\n            id=\"kt_login_forgot\"\r\n          >\r\n            Forgot Password ?\r\n          </a>\r\n          <button\r\n            ref=\"kt_login_signin_submit\"\r\n            class=\"btn btn-primary font-weight-bold px-9 py-4 my-3 font-size-3\"\r\n          >\r\n            Sign In\r\n          </button>\r\n        </div>\r\n        <!--end::Action-->\r\n      </b-form>\r\n      <!--end::Form-->\r\n    </div>\r\n    <!--end::Signin-->\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n.spinner.spinner-right {\r\n  padding-right: 3.5rem !important;\r\n}\r\n</style>\r\n\r\n<script>\r\nimport { mapState } from \"vuex\";\r\nimport { LOGIN, LOGOUT } from \"@/core/services/store/auth.module\";\r\n\r\nimport { validationMixin } from \"vuelidate\";\r\nimport { email, minLength, required } from \"vuelidate/lib/validators\";\r\n\r\nexport default {\r\n  mixins: [validationMixin],\r\n  name: \"login\",\r\n  data() {\r\n    return {\r\n      // Remove this dummy login info\r\n      form: {\r\n        email: \"admin@demo.com\",\r\n        password: \"demo\"\r\n      }\r\n    };\r\n  },\r\n  validations: {\r\n    form: {\r\n      email: {\r\n        required,\r\n        email\r\n      },\r\n      password: {\r\n        required,\r\n        minLength: minLength(3)\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    validateState(name) {\r\n      const { $dirty, $error } = this.$v.form[name];\r\n      return $dirty ? !$error : null;\r\n    },\r\n    resetForm() {\r\n      this.form = {\r\n        email: null,\r\n        password: null\r\n      };\r\n\r\n      this.$nextTick(() => {\r\n        this.$v.$reset();\r\n      });\r\n    },\r\n    onSubmit() {\r\n      this.$v.form.$touch();\r\n      if (this.$v.form.$anyError) {\r\n        return;\r\n      }\r\n\r\n      const email = this.$v.form.email.$model;\r\n      const password = this.$v.form.password.$model;\r\n\r\n      // clear existing errors\r\n      this.$store.dispatch(LOGOUT);\r\n\r\n      // set spinner to submit button\r\n      const submitButton = this.$refs[\"kt_login_signin_submit\"];\r\n      submitButton.classList.add(\"spinner\", \"spinner-light\", \"spinner-right\");\r\n\r\n      // dummy delay\r\n      setTimeout(() => {\r\n        // send login request\r\n        this.$store\r\n          .dispatch(LOGIN, { email, password })\r\n          // go to which page after successfully login\r\n          .then(() => this.$router.push({ name: \"dashboard\" }));\r\n\r\n        submitButton.classList.remove(\r\n          \"spinner\",\r\n          \"spinner-light\",\r\n          \"spinner-right\"\r\n        );\r\n      }, 2000);\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      errors: state => state.auth.errors\r\n    })\r\n  }\r\n};\r\n</script>\r\n"]}]}