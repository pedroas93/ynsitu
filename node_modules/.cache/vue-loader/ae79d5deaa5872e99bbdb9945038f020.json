{"remainingRequest":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/src/view/layout/header/Menu.vue?vue&type=template&id=162c3986&","dependencies":[{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/src/view/layout/header/Menu.vue","mtime":1595045714657},{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/cache-loader/dist/cjs.js","mtime":1594863441194},{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1594863453662},{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/cache-loader/dist/cjs.js","mtime":1594863441194},{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/vue-loader/lib/index.js","mtime":1594863453662}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}