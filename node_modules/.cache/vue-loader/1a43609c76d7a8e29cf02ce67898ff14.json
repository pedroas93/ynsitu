{"remainingRequest":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/src/view/layout/aside/Menu.vue?vue&type=template&id=76b831aa&","dependencies":[{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/src/view/layout/aside/Menu.vue","mtime":1595045714617},{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/cache-loader/dist/cjs.js","mtime":1594863441194},{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1594863453662},{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/cache-loader/dist/cjs.js","mtime":1594863441194},{"path":"/Users/davidfelipepedrazarubiano/Documents/Ynsitu/ynsitu/demo1/node_modules/vue-loader/lib/index.js","mtime":1594863453662}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cjx1bCBjbGFzcz0ibWVudS1uYXYiPgogIDxyb3V0ZXItbGluawogICAgdG89Ii9kYXNoYm9hcmQiCiAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgPgogICAgPGxpCiAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICA6Y2xhc3M9IlsKICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgXSIKICAgID4KICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgIDxpIGNsYXNzPSJtZW51LWljb24gZmxhdGljb24yLWFyY2hpdGVjdHVyZS1hbmQtY2l0eSI+PC9pPgogICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPkRhc2hib2FyZDwvc3Bhbj4KICAgICAgPC9hPgogICAgPC9saT4KICA8L3JvdXRlci1saW5rPgoKICA8IS0tIDxyb3V0ZXItbGluawogICAgdG89Ii9idWlsZGVyIgogICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogID4KICAgIDxsaQogICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgOmNsYXNzPSJbCiAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgIF0iCiAgICA+CiAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICA8aSBjbGFzcz0ibWVudS1pY29uIGZsYXRpY29uMi1leHBhbmQiPjwvaT4KICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5MYXlvdXQgQnVpbGRlcjwvc3Bhbj4KICAgICAgPC9hPgogICAgPC9saT4KICA8L3JvdXRlci1saW5rPiAtLT4KCiAgPCEtLSA8bGkgY2xhc3M9Im1lbnUtc2VjdGlvbiI+CiAgICA8aDQgY2xhc3M9Im1lbnUtdGV4dCI+Q29tcG9uZW50czwvaDQ+CiAgICA8aSBjbGFzcz0ibWVudS1pY29uIGZsYXRpY29uLW1vcmUtdjIiPjwvaT4KICA8L2xpPiAtLT4KCiAgPCEtLSA8bGkKICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXN1Ym1lbnUiCiAgICB2LWJpbmQ6Y2xhc3M9InsgJ21lbnUtaXRlbS1vcGVuJzogaGFzQWN0aXZlQ2hpbGRyZW4oJy92dWUtYm9vdHN0cmFwJykgfSIKICA+CiAgICA8YSBocmVmPSIjIiBjbGFzcz0ibWVudS1saW5rIG1lbnUtdG9nZ2xlIj4KICAgICAgPGkgY2xhc3M9Im1lbnUtaWNvbiBmbGF0aWNvbjItZGlnaXRhbC1tYXJrZXRpbmciPjwvaT4KICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+VnVlIEJvb3RzdHJhcDwvc3Bhbj4KICAgICAgPGkgY2xhc3M9Im1lbnUtYXJyb3ciPjwvaT4KICAgIDwvYT4KICAgIDxkaXYgY2xhc3M9Im1lbnUtc3VibWVudSI+CiAgICAgIDxzcGFuIGNsYXNzPSJtZW51LWFycm93Ij48L3NwYW4+CiAgICAgIDx1bCBjbGFzcz0ibWVudS1zdWJuYXYiPgogICAgICAgIDxsaSBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS1wYXJlbnQiPgogICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtbGluayI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPlZ1ZSBCb290c3RyYXA8L3NwYW4+CiAgICAgICAgICA8L3NwYW4+CiAgICAgICAgPC9saT4KCiAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICB0bz0iL3Z1ZS1ib290c3RyYXAvYWxlcnQiCiAgICAgICAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgICAgICAgPgogICAgICAgICAgPGxpCiAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICAgICAgICA6Y2xhc3M9IlsKICAgICAgICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgICAgICAgXSIKICAgICAgICAgID4KICAgICAgICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5BbGVydDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICA8L3JvdXRlci1saW5rPgoKICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgIHRvPSIvdnVlLWJvb3RzdHJhcC9iYWRnZSIKICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICA+CiAgICAgICAgICA8bGkKICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICBdIgogICAgICAgICAgPgogICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPkJhZGdlPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgIDwvcm91dGVyLWxpbms+CgogICAgICAgIDxsaQogICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tc3VibWVudSIKICAgICAgICAgIHYtYmluZDpjbGFzcz0iewogICAgICAgICAgICAnbWVudS1pdGVtLW9wZW4nOiBoYXNBY3RpdmVDaGlsZHJlbignL3Z1ZS1ib290c3RyYXAvYnV0dG9uJykKICAgICAgICAgIH0iCiAgICAgICAgPgogICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9Im1lbnUtbGluayBtZW51LXRvZ2dsZSI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgPC9pPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5CdXR0b25zPC9zcGFuPgogICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1hcnJvdyI+PC9pPgogICAgICAgICAgPC9hPgogICAgICAgICAgPGRpdiBjbGFzcz0ibWVudS1zdWJtZW51Ij4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtYXJyb3ciPjwvc3Bhbj4KICAgICAgICAgICAgPHVsIGNsYXNzPSJtZW51LXN1Ym5hdiI+CiAgICAgICAgICAgICAgPGxpIGFyaWEtaGFzcG9wdXA9InRydWUiIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXBhcmVudCI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS1saW5rIj4KICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgIDwvbGk+CgogICAgICAgICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgICAgICAgdG89Ii92dWUtYm9vdHN0cmFwL2J1dHRvbiIKICAgICAgICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICAgICAgICBdIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPkJ1dHRvbjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgoKICAgICAgICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgICAgICAgIHRvPSIvdnVlLWJvb3RzdHJhcC9idXR0b24tZ3JvdXAiCiAgICAgICAgICAgICAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICAgICAgICAgICAgICA6Y2xhc3M9IlsKICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgICAgICAgICAgICAgXSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5CdXR0b24gR3JvdXA8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KCiAgICAgICAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICAgICAgICB0bz0iL3Z1ZS1ib290c3RyYXAvYnV0dG9uLXRvb2xiYXIiCiAgICAgICAgICAgICAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICAgICAgICAgICAgICA6Y2xhc3M9IlsKICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgICAgICAgICAgICAgXSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5CdXR0b24gVG9vbGJhcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICAgICAgICA8L3VsPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9saT4KCiAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICB0bz0iL3Z1ZS1ib290c3RyYXAvY2FyZCIKICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICA+CiAgICAgICAgICA8bGkKICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICBdIgogICAgICAgICAgPgogICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPkNhcmQ8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgPC9yb3V0ZXItbGluaz4KCiAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICB0bz0iL3Z1ZS1ib290c3RyYXAvY2Fyb3VzZWwiCiAgICAgICAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgICAgICAgPgogICAgICAgICAgPGxpCiAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICAgICAgICA6Y2xhc3M9IlsKICAgICAgICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgICAgICAgXSIKICAgICAgICAgID4KICAgICAgICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5DYXJvdXNlbDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICA8L3JvdXRlci1saW5rPgoKICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgIHRvPSIvdnVlLWJvb3RzdHJhcC9jb2xsYXBzZSIKICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICA+CiAgICAgICAgICA8bGkKICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICBdIgogICAgICAgICAgPgogICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPkNvbGxhcHNlPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgIDwvcm91dGVyLWxpbms+CgogICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgdG89Ii92dWUtYm9vdHN0cmFwL2Ryb3Bkb3duIgogICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgID4KICAgICAgICAgIDxsaQogICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgIF0iCiAgICAgICAgICA+CiAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+RHJvcGRvd248L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgPC9yb3V0ZXItbGluaz4KCiAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICB0bz0iL3Z1ZS1ib290c3RyYXAvZW1iZWQiCiAgICAgICAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgICAgICAgPgogICAgICAgICAgPGxpCiAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICAgICAgICA6Y2xhc3M9IlsKICAgICAgICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgICAgICAgXSIKICAgICAgICAgID4KICAgICAgICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5FbWJlZDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICA8L3JvdXRlci1saW5rPgoKICAgICAgICA8bGkKICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXN1Ym1lbnUiCiAgICAgICAgICB2LWJpbmQ6Y2xhc3M9InsKICAgICAgICAgICAgJ21lbnUtaXRlbS1vcGVuJzogaGFzQWN0aXZlQ2hpbGRyZW4oJy92dWUtYm9vdHN0cmFwL2Zvcm0nKQogICAgICAgICAgfSIKICAgICAgICA+CiAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0ibWVudS1saW5rIG1lbnUtdG9nZ2xlIj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICA8L2k+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPkZvcm08L3NwYW4+CiAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWFycm93Ij48L2k+CiAgICAgICAgICA8L2E+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJtZW51LXN1Ym1lbnUiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS1hcnJvdyI+PC9zcGFuPgogICAgICAgICAgICA8dWwgY2xhc3M9Im1lbnUtc3VibmF2Ij4KICAgICAgICAgICAgICA8bGkgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tcGFyZW50Ij4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LWxpbmsiPgogICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICAgICAgICB0bz0iL3Z1ZS1ib290c3RyYXAvZm9ybSIKICAgICAgICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICAgICAgICBdIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPkZvcm08L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KCiAgICAgICAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICAgICAgICB0bz0iL3Z1ZS1ib290c3RyYXAvZm9ybS1jaGVja2JveCIKICAgICAgICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICAgICAgICBdIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPkZvcm0gQ2hlY2tib3g8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KCiAgICAgICAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICAgICAgICB0bz0iL3Z1ZS1ib290c3RyYXAvZm9ybS1maWxlIgogICAgICAgICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgICAgICAgIF0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+Rm9ybSBGaWxlPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CgogICAgICAgICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgICAgICAgdG89Ii92dWUtYm9vdHN0cmFwL2Zvcm0tZ3JvdXAiCiAgICAgICAgICAgICAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICAgICAgICAgICAgICA6Y2xhc3M9IlsKICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgICAgICAgICAgICAgXSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5Gb3JtIEdyb3VwPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CgogICAgICAgICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgICAgICAgdG89Ii92dWUtYm9vdHN0cmFwL2Zvcm0taW5wdXQiCiAgICAgICAgICAgICAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICAgICAgICAgICAgICA6Y2xhc3M9IlsKICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgICAgICAgICAgICAgXSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5Gb3JtIElucHV0PC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CgogICAgICAgICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgICAgICAgdG89Ii92dWUtYm9vdHN0cmFwL2Zvcm0tcmFkaW8iCiAgICAgICAgICAgICAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICAgICAgICAgICAgICA6Y2xhc3M9IlsKICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgICAgICAgICAgICAgXSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5Gb3JtIFJhZGlvPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CgogICAgICAgICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgICAgICAgdG89Ii92dWUtYm9vdHN0cmFwL2Zvcm0tc2VsZWN0IgogICAgICAgICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgICAgICAgIF0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+Rm9ybSBTZWxlY3Q8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KCiAgICAgICAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICAgICAgICB0bz0iL3Z1ZS1ib290c3RyYXAvZm9ybS10ZXh0YXJlYSIKICAgICAgICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICAgICAgICBdIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPkZvcm0gVGV4dGFyZWE8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvbGk+CgogICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgdG89Ii92dWUtYm9vdHN0cmFwL2ltYWdlIgogICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgID4KICAgICAgICAgIDxsaQogICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgIF0iCiAgICAgICAgICA+CiAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+SW1hZ2U8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgPC9yb3V0ZXItbGluaz4KCiAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICB0bz0iL3Z1ZS1ib290c3RyYXAvaW5wdXQtZ3JvdXAiCiAgICAgICAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgICAgICAgPgogICAgICAgICAgPGxpCiAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICAgICAgICA6Y2xhc3M9IlsKICAgICAgICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgICAgICAgXSIKICAgICAgICAgID4KICAgICAgICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5JbnB1dCBHcm91cDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICA8L3JvdXRlci1saW5rPgoKICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgIHRvPSIvdnVlLWJvb3RzdHJhcC9qdW1ib3Ryb24iCiAgICAgICAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgICAgICAgPgogICAgICAgICAgPGxpCiAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICAgICAgICA6Y2xhc3M9IlsKICAgICAgICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgICAgICAgXSIKICAgICAgICAgID4KICAgICAgICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5KdW1ib3Ryb248L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgPC9yb3V0ZXItbGluaz4KCiAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICB0bz0iL3Z1ZS1ib290c3RyYXAvbGF5b3V0LWdyaWQtc3lzdGVtIgogICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgID4KICAgICAgICAgIDxsaQogICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgIF0iCiAgICAgICAgICA+CiAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+TGF5b3V0IGFuZCBHcmlkIFN5c3RlbTwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICA8L3JvdXRlci1saW5rPgoKICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgIHRvPSIvdnVlLWJvb3RzdHJhcC9saW5rIgogICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgID4KICAgICAgICAgIDxsaQogICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgIF0iCiAgICAgICAgICA+CiAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+TGluazwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICA8L3JvdXRlci1saW5rPgoKICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgIHRvPSIvdnVlLWJvb3RzdHJhcC9saXN0LWdyb3VwIgogICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgID4KICAgICAgICAgIDxsaQogICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgIF0iCiAgICAgICAgICA+CiAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+TGlzdCBncm91cDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICA8L3JvdXRlci1saW5rPgoKICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgIHRvPSIvdnVlLWJvb3RzdHJhcC9tZWRpYSIKICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICA+CiAgICAgICAgICA8bGkKICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICBdIgogICAgICAgICAgPgogICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPk1lZGlhPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgIDwvcm91dGVyLWxpbms+CgogICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgdG89Ii92dWUtYm9vdHN0cmFwL21vZGFsIgogICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgID4KICAgICAgICAgIDxsaQogICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgIF0iCiAgICAgICAgICA+CiAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+TW9kYWw8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgPC9yb3V0ZXItbGluaz4KCiAgICAgICAgPGxpCiAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS1zdWJtZW51IgogICAgICAgICAgdi1iaW5kOmNsYXNzPSJ7CiAgICAgICAgICAgICdtZW51LWl0ZW0tb3Blbic6IGhhc0FjdGl2ZUNoaWxkcmVuKCcvdnVlLWJvb3RzdHJhcC9uYXYnKQogICAgICAgICAgfSIKICAgICAgICA+CiAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0ibWVudS1saW5rIG1lbnUtdG9nZ2xlIj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICA8L2k+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPk5hdmlnYXRpb248L3NwYW4+CiAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWFycm93Ij48L2k+CiAgICAgICAgICA8L2E+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJtZW51LXN1Ym1lbnUiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS1hcnJvdyI+PC9zcGFuPgogICAgICAgICAgICA8dWwgY2xhc3M9Im1lbnUtc3VibmF2Ij4KICAgICAgICAgICAgICA8bGkgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tcGFyZW50Ij4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LWxpbmsiPgogICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICAgICAgICB0bz0iL3Z1ZS1ib290c3RyYXAvbmF2IgogICAgICAgICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgICAgICAgIF0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+TmF2PC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CgogICAgICAgICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgICAgICAgdG89Ii92dWUtYm9vdHN0cmFwL25hdmJhciIKICAgICAgICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICAgICAgICBdIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPk5hdmJhcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICAgICAgICA8L3VsPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9saT4KCiAgICAgICAgPGxpCiAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS1zdWJtZW51IgogICAgICAgICAgdi1iaW5kOmNsYXNzPSJ7CiAgICAgICAgICAgICdtZW51LWl0ZW0tb3Blbic6IGhhc0FjdGl2ZUNoaWxkcmVuKCcvdnVlLWJvb3RzdHJhcC9wYWdpbmF0aW9uJykKICAgICAgICAgIH0iCiAgICAgICAgPgogICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9Im1lbnUtbGluayBtZW51LXRvZ2dsZSI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgPC9pPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5QYWdpbmF0aW9uPC9zcGFuPgogICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1hcnJvdyI+PC9pPgogICAgICAgICAgPC9hPgogICAgICAgICAgPGRpdiBjbGFzcz0ibWVudS1zdWJtZW51Ij4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtYXJyb3ciPjwvc3Bhbj4KICAgICAgICAgICAgPHVsIGNsYXNzPSJtZW51LXN1Ym5hdiI+CiAgICAgICAgICAgICAgPGxpIGFyaWEtaGFzcG9wdXA9InRydWUiIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXBhcmVudCI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS1saW5rIj4KICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgIDwvbGk+CgogICAgICAgICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgICAgICAgdG89Ii92dWUtYm9vdHN0cmFwL3BhZ2luYXRpb24iCiAgICAgICAgICAgICAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICAgICAgICAgICAgICA6Y2xhc3M9IlsKICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgICAgICAgICAgICAgXSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5QYWdpbmF0aW9uPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CgogICAgICAgICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgICAgICAgdG89Ii92dWUtYm9vdHN0cmFwL3BhZ2luYXRpb24tbmF2IgogICAgICAgICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgICAgICAgIF0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+UGFnaW5hdGlvbiBOYXY8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvbGk+CgogICAgICAgIDxsaQogICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tc3VibWVudSIKICAgICAgICA+CiAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0ibWVudS1saW5rIG1lbnUtdG9nZ2xlIj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICA8L2k+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPk5vdGlmeTwvc3Bhbj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYXJyb3ciPjwvaT4KICAgICAgICAgIDwvYT4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1lbnUtc3VibWVudSI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LWFycm93Ij48L3NwYW4+CiAgICAgICAgICAgIDx1bCBjbGFzcz0ibWVudS1zdWJuYXYiPgogICAgICAgICAgICAgIDxsaSBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS1wYXJlbnQiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtbGluayI+CiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgICAgICAgIHRvPSIvdnVlLWJvb3RzdHJhcC9wb3BvdmVyIgogICAgICAgICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgICAgICAgIF0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+UG9wb3Zlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgoKICAgICAgICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgICAgICAgIHRvPSIvdnVlLWJvb3RzdHJhcC90b2FzdHMiCiAgICAgICAgICAgICAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICAgICAgICAgICAgICA6Y2xhc3M9IlsKICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgICAgICAgICAgICAgXSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5Ub2FzdHM8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KCiAgICAgICAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICAgICAgICB0bz0iL3Z1ZS1ib290c3RyYXAvdG9vbHRpcCIKICAgICAgICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICAgICAgICBdIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPlRvb2x0aXA8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvbGk+CgogICAgICAgIDxsaQogICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tc3VibWVudSIKICAgICAgICA+CiAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0ibWVudS1saW5rIG1lbnUtdG9nZ2xlIj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICA8L2k+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPlByb2dyZXNzPC9zcGFuPgogICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1hcnJvdyI+PC9pPgogICAgICAgICAgPC9hPgogICAgICAgICAgPGRpdiBjbGFzcz0ibWVudS1zdWJtZW51Ij4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtYXJyb3ciPjwvc3Bhbj4KICAgICAgICAgICAgPHVsIGNsYXNzPSJtZW51LXN1Ym5hdiI+CiAgICAgICAgICAgICAgPGxpIGFyaWEtaGFzcG9wdXA9InRydWUiIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXBhcmVudCI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS1saW5rIj4KICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgIDwvbGk+CgogICAgICAgICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgICAgICAgdG89Ii92dWUtYm9vdHN0cmFwL3Byb2dyZXNzIgogICAgICAgICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgICAgICAgIF0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+UHJvZ3Jlc3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KCiAgICAgICAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICAgICAgICB0bz0iL3Z1ZS1ib290c3RyYXAvc3Bpbm5lciIKICAgICAgICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICAgICAgICBdIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPlNwaW5uZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvbGk+CgogICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgdG89Ii92dWUtYm9vdHN0cmFwL3RhYmxlIgogICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgID4KICAgICAgICAgIDxsaQogICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgIF0iCiAgICAgICAgICA+CiAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+VGFibGU8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgPC9yb3V0ZXItbGluaz4KCiAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICB0bz0iL3Z1ZS1ib290c3RyYXAvdGFicyIKICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICA+CiAgICAgICAgICA8bGkKICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICBdIgogICAgICAgICAgPgogICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPlRhYnM8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgPC91bD4KICAgIDwvZGl2PgogIDwvbGk+IC0tPgoKICA8IS0tIDxsaQogICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tc3VibWVudSIKICAgIHYtYmluZDpjbGFzcz0ieyAnbWVudS1pdGVtLW9wZW4nOiBoYXNBY3RpdmVDaGlsZHJlbigndnVldGlmeScpIH0iCiAgPgogICAgPGEgaHJlZj0iIyIgY2xhc3M9Im1lbnUtbGluayBtZW51LXRvZ2dsZSI+CiAgICAgIDxpIGNsYXNzPSJtZW51LWljb24gZmxhdGljb24td2ViIj48L2k+CiAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPlZ1ZXRpZnk8L3NwYW4+CiAgICAgIDxpIGNsYXNzPSJtZW51LWFycm93Ij48L2k+CiAgICA8L2E+CiAgICA8ZGl2IGNsYXNzPSJtZW51LXN1Ym1lbnUiIHN0eWxlPSJkaXNwbGF5OiBub25lOyBvdmVyZmxvdzogaGlkZGVuOyI+CiAgICAgIDxzcGFuIGNsYXNzPSJtZW51LWFycm93Ij48L3NwYW4+CiAgICAgIDx1bCBjbGFzcz0ibWVudS1zdWJuYXYiPgogICAgICAgIDxsaSBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS1wYXJlbnQiPgogICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtbGluayI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPlZ1ZXRpZnk8L3NwYW4+CiAgICAgICAgICA8L3NwYW4+CiAgICAgICAgPC9saT4KCiAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICB0bz0iL3Z1ZXRpZnkvYWxlcnRzIgogICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgID4KICAgICAgICAgIDxsaQogICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgIF0iCiAgICAgICAgICA+CiAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+QWxlcnRzPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgIDwvcm91dGVyLWxpbms+CgogICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgdG89Ii92dWV0aWZ5L2F2YXRhcnMiCiAgICAgICAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgICAgICAgPgogICAgICAgICAgPGxpCiAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICAgICAgICA6Y2xhc3M9IlsKICAgICAgICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgICAgICAgXSIKICAgICAgICAgID4KICAgICAgICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5BdmF0YXJzPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgIDwvcm91dGVyLWxpbms+CgogICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgdG89Ii92dWV0aWZ5L2JhZGdlcyIKICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICA+CiAgICAgICAgICA8bGkKICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICBdIgogICAgICAgICAgPgogICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPkJhZGdlczwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICA8L3JvdXRlci1saW5rPgoKICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgIHRvPSIvdnVldGlmeS9idXR0b25zIgogICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgID4KICAgICAgICAgIDxsaQogICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgIF0iCiAgICAgICAgICA+CiAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+QnV0dG9uczwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICA8L3JvdXRlci1saW5rPgoKICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgIHRvPSIvdnVldGlmeS9jYWxlbmRhcnMiCiAgICAgICAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgICAgICAgPgogICAgICAgICAgPGxpCiAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICAgICAgICA6Y2xhc3M9IlsKICAgICAgICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgICAgICAgXSIKICAgICAgICAgID4KICAgICAgICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5DYWxlbmRhcnM8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgPC9yb3V0ZXItbGluaz4KCiAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICB0bz0iL3Z1ZXRpZnkvY2FyZHMiCiAgICAgICAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgICAgICAgPgogICAgICAgICAgPGxpCiAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICAgICAgICA6Y2xhc3M9IlsKICAgICAgICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgICAgICAgXSIKICAgICAgICAgID4KICAgICAgICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5DYXJkczwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICA8L3JvdXRlci1saW5rPgoKICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgIHRvPSIvdnVldGlmeS9jaGlwcyIKICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICA+CiAgICAgICAgICA8bGkKICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICBdIgogICAgICAgICAgPgogICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPkNoaXBzPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgIDwvcm91dGVyLWxpbms+CgogICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgdG89Ii92dWV0aWZ5L2RpYWxvZyIKICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICA+CiAgICAgICAgICA8bGkKICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICBdIgogICAgICAgICAgPgogICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPkRpYWxvZzwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICA8L3JvdXRlci1saW5rPgoKICAgICAgICA8bGkKICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXN1Ym1lbnUiCiAgICAgICAgPgogICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9Im1lbnUtbGluayBtZW51LXRvZ2dsZSI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgPC9pPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5Gb3Jtczwvc3Bhbj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYXJyb3ciPjwvaT4KICAgICAgICAgIDwvYT4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1lbnUtc3VibWVudSI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LWFycm93Ij48L3NwYW4+CiAgICAgICAgICAgIDx1bCBjbGFzcz0ibWVudS1zdWJuYXYiPgogICAgICAgICAgICAgIDxsaSBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS1wYXJlbnQiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtbGluayI+CiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgICAgICAgIHRvPSIvdnVldGlmeS9hdXRvY29tcGxldGVzIgogICAgICAgICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgICAgICAgIF0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+QXV0b2NvbXBsZXRlczwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgoKICAgICAgICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgICAgICAgIHRvPSIvdnVldGlmeS9maWxlLWlucHV0cyIKICAgICAgICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICAgICAgICBdIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPkZpbGUgSW5wdXRzPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CgogICAgICAgICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgICAgICAgdG89Ii92dWV0aWZ5L2Zvcm1zIgogICAgICAgICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgICAgICAgIF0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+Rm9ybXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KCiAgICAgICAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICAgICAgICB0bz0iL3Z1ZXRpZnkvc2VsZWN0aW9uLWNvbnRyb2xzIgogICAgICAgICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgICAgICAgIF0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+U2VsZWN0aW9uIENvbnRyb2xzPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CgogICAgICAgICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgICAgICAgdG89Ii92dWV0aWZ5L3NlbGVjdHMiCiAgICAgICAgICAgICAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICAgICAgICAgICAgICA6Y2xhc3M9IlsKICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgICAgICAgICAgICAgXSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5TZWxlY3RzPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CgogICAgICAgICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgICAgICAgdG89Ii92dWV0aWZ5L3RleHRhcmVhcyIKICAgICAgICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICAgICAgICBdIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPlRleHRhcmVhczwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgoKICAgICAgICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgICAgICAgIHRvPSIvdnVldGlmeS90ZXh0LWZpZWxkcyIKICAgICAgICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICAgICAgICBdIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPlRleHQgRmllbGRzPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2xpPgoKICAgICAgICA8bGkKICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXN1Ym1lbnUiCiAgICAgICAgPgogICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9Im1lbnUtbGluayBtZW51LXRvZ2dsZSI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgPC9pPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5UYWJsZXM8L3NwYW4+CiAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWFycm93Ij48L2k+CiAgICAgICAgICA8L2E+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJtZW51LXN1Ym1lbnUiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS1hcnJvdyI+PC9zcGFuPgogICAgICAgICAgICA8dWwgY2xhc3M9Im1lbnUtc3VibmF2Ij4KICAgICAgICAgICAgICA8bGkgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tcGFyZW50Ij4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LWxpbmsiPgogICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICAgICAgICB0bz0iL3Z1ZXRpZnkvc2ltcGxlLXRhYmxlcyIKICAgICAgICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICAgICAgICBdIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPlNpbXBsZSBUYWJsZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KCiAgICAgICAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICAgICAgICB0bz0iL3Z1ZXRpZnkvZGF0YS10YWJsZXMiCiAgICAgICAgICAgICAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICAgICAgICAgICAgICA6Y2xhc3M9IlsKICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgICAgICAgICAgICAgXSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5EYXRhIFRhYmxlczwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICAgICAgICA8L3VsPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9saT4KCiAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICB0bz0iL3Z1ZXRpZnkvdGFicyIKICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICA+CiAgICAgICAgICA8bGkKICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICBdIgogICAgICAgICAgPgogICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPlRhYnM8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgPC9yb3V0ZXItbGluaz4KCiAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICB0bz0iL3Z1ZXRpZnkvdGltZWxpbmVzIgogICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgID4KICAgICAgICAgIDxsaQogICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgIF0iCiAgICAgICAgICA+CiAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+VGltZWxpbmVzPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgIDwvcm91dGVyLWxpbms+CgogICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgdG89Ii92dWV0aWZ5L3Rvb2x0aXBzIgogICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgID4KICAgICAgICAgIDxsaQogICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgIF0iCiAgICAgICAgICA+CiAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+VG9vbHRpcHM8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgPC9yb3V0ZXItbGluaz4KCiAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICB0bz0iL3Z1ZXRpZnkvdHJlZXZpZXciCiAgICAgICAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgICAgICAgPgogICAgICAgICAgPGxpCiAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICAgICAgICA6Y2xhc3M9IlsKICAgICAgICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgICAgICAgXSIKICAgICAgICAgID4KICAgICAgICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5UcmVldmlldzwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICA8L3VsPgogICAgPC9kaXY+CiAgPC9saT4gLS0+CgogIDwhLS0gPGxpIGNsYXNzPSJtZW51LXNlY3Rpb24iPgogICAgPGg0IGNsYXNzPSJtZW51LXRleHQiPkN1c3RvbTwvaDQ+CiAgICA8aSBjbGFzcz0ibWVudS1pY29uIGZsYXRpY29uLW1vcmUtdjIiPjwvaT4KICA8L2xpPgoKICA8bGkKICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXN1Ym1lbnUiCiAgICB2LWJpbmQ6Y2xhc3M9InsgJ21lbnUtaXRlbS1vcGVuJzogaGFzQWN0aXZlQ2hpbGRyZW4oJy9lcnJvci9lcnJvcicpIH0iCiAgPgogICAgPGEgaHJlZj0iIyIgY2xhc3M9Im1lbnUtbGluayBtZW51LXRvZ2dsZSI+CiAgICAgIDxpIGNsYXNzPSJtZW51LWljb24gZmxhdGljb24yLWxpc3QtMiI+PC9pPgogICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5FcnJvciBQYWdlczwvc3Bhbj4KICAgICAgPGkgY2xhc3M9Im1lbnUtYXJyb3ciPjwvaT4KICAgIDwvYT4KICAgIDxkaXYgY2xhc3M9Im1lbnUtc3VibWVudSI+CiAgICAgIDxzcGFuIGNsYXNzPSJtZW51LWFycm93Ij48L3NwYW4+CiAgICAgIDx1bCBjbGFzcz0ibWVudS1zdWJuYXYiPgogICAgICAgIDxsaSBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS1wYXJlbnQiPgogICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtbGluayI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPkVycm9yIFBhZ2VzPC9zcGFuPgogICAgICAgICAgPC9zcGFuPgogICAgICAgIDwvbGk+CgogICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgdG89Ii9lcnJvci9lcnJvci0xIgogICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgID4KICAgICAgICAgIDxsaQogICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgIF0iCiAgICAgICAgICA+CiAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+RXJyb3IgMTwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICA8L3JvdXRlci1saW5rPgoKICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgIHRvPSIvZXJyb3IvZXJyb3ItMiIKICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICA+CiAgICAgICAgICA8bGkKICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICBdIgogICAgICAgICAgPgogICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPkVycm9yIDI8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgPC9yb3V0ZXItbGluaz4KCiAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICB0bz0iL2Vycm9yL2Vycm9yLTMiCiAgICAgICAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgICAgICAgPgogICAgICAgICAgPGxpCiAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICAgICAgICA6Y2xhc3M9IlsKICAgICAgICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgICAgICAgXSIKICAgICAgICAgID4KICAgICAgICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5FcnJvciAzPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgIDwvcm91dGVyLWxpbms+CgogICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgdG89Ii9lcnJvci9lcnJvci00IgogICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgID4KICAgICAgICAgIDxsaQogICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgIF0iCiAgICAgICAgICA+CiAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+RXJyb3IgNDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICA8L3JvdXRlci1saW5rPgoKICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgIHRvPSIvZXJyb3IvZXJyb3ItNSIKICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICA+CiAgICAgICAgICA8bGkKICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICBdIgogICAgICAgICAgPgogICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPkVycm9yIDU8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgPC9yb3V0ZXItbGluaz4KCiAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICB0bz0iL2Vycm9yL2Vycm9yLTYiCiAgICAgICAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgICAgICAgPgogICAgICAgICAgPGxpCiAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICAgICAgICA6Y2xhc3M9IlsKICAgICAgICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgICAgICAgXSIKICAgICAgICAgID4KICAgICAgICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5FcnJvciA2PC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgIDwvdWw+CiAgICA8L2Rpdj4KICA8L2xpPgoKICA8bGkKICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXN1Ym1lbnUiCiAgICB2LWJpbmQ6Y2xhc3M9InsgJ21lbnUtaXRlbS1vcGVuJzogaGFzQWN0aXZlQ2hpbGRyZW4oJy93aXphcmQvd2l6YXJkJykgfSIKICA+CiAgICA8YSBocmVmPSIjIiBjbGFzcz0ibWVudS1saW5rIG1lbnUtdG9nZ2xlIj4KICAgICAgPGkgY2xhc3M9Im1lbnUtaWNvbiBmbGF0aWNvbjItbWFpbC0xIj48L2k+CiAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPldpemFyZDwvc3Bhbj4KICAgICAgPGkgY2xhc3M9Im1lbnUtYXJyb3ciPjwvaT4KICAgIDwvYT4KICAgIDxkaXYgY2xhc3M9Im1lbnUtc3VibWVudSI+CiAgICAgIDxzcGFuIGNsYXNzPSJtZW51LWFycm93Ij48L3NwYW4+CiAgICAgIDx1bCBjbGFzcz0ibWVudS1zdWJuYXYiPgogICAgICAgIDxsaSBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS1wYXJlbnQiPgogICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtbGluayI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPldpemFyZDwvc3Bhbj4KICAgICAgICAgIDwvc3Bhbj4KICAgICAgICA8L2xpPgoKICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgIHRvPSIvd2l6YXJkL3dpemFyZC0xIgogICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgID4KICAgICAgICAgIDxsaQogICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgIF0iCiAgICAgICAgICA+CiAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+V2l6YXJkIDE8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgPC9yb3V0ZXItbGluaz4KCiAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICB0bz0iL3dpemFyZC93aXphcmQtMiIKICAgICAgICAgIHYtc2xvdD0ieyBocmVmLCBuYXZpZ2F0ZSwgaXNBY3RpdmUsIGlzRXhhY3RBY3RpdmUgfSIKICAgICAgICA+CiAgICAgICAgICA8bGkKICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgZGF0YS1tZW51LXRvZ2dsZT0iaG92ZXIiCiAgICAgICAgICAgIGNsYXNzPSJtZW51LWl0ZW0iCiAgICAgICAgICAgIDpjbGFzcz0iWwogICAgICAgICAgICAgIGlzQWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJywKICAgICAgICAgICAgICBpc0V4YWN0QWN0aXZlICYmICdtZW51LWl0ZW0tYWN0aXZlJwogICAgICAgICAgICBdIgogICAgICAgICAgPgogICAgICAgICAgICA8YSA6aHJlZj0iaHJlZiIgY2xhc3M9Im1lbnUtbGluayIgQGNsaWNrPSJuYXZpZ2F0ZSI+CiAgICAgICAgICAgICAgPGkgY2xhc3M9Im1lbnUtYnVsbGV0IG1lbnUtYnVsbGV0LWRvdCI+CiAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRleHQiPldpemFyZCAyPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgIDwvcm91dGVyLWxpbms+CgogICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgdG89Ii93aXphcmQvd2l6YXJkLTMiCiAgICAgICAgICB2LXNsb3Q9InsgaHJlZiwgbmF2aWdhdGUsIGlzQWN0aXZlLCBpc0V4YWN0QWN0aXZlIH0iCiAgICAgICAgPgogICAgICAgICAgPGxpCiAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgIGRhdGEtbWVudS10b2dnbGU9ImhvdmVyIgogICAgICAgICAgICBjbGFzcz0ibWVudS1pdGVtIgogICAgICAgICAgICA6Y2xhc3M9IlsKICAgICAgICAgICAgICBpc0FjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScsCiAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZSAmJiAnbWVudS1pdGVtLWFjdGl2ZScKICAgICAgICAgICAgXSIKICAgICAgICAgID4KICAgICAgICAgICAgPGEgOmhyZWY9ImhyZWYiIGNsYXNzPSJtZW51LWxpbmsiIEBjbGljaz0ibmF2aWdhdGUiPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtZW51LWJ1bGxldCBtZW51LWJ1bGxldC1kb3QiPgogICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10ZXh0Ij5XaXphcmQgMzwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICA8L3JvdXRlci1saW5rPgoKICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgIHRvPSIvd2l6YXJkL3dpemFyZC00IgogICAgICAgICAgdi1zbG90PSJ7IGhyZWYsIG5hdmlnYXRlLCBpc0FjdGl2ZSwgaXNFeGFjdEFjdGl2ZSB9IgogICAgICAgID4KICAgICAgICAgIDxsaQogICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICBkYXRhLW1lbnUtdG9nZ2xlPSJob3ZlciIKICAgICAgICAgICAgY2xhc3M9Im1lbnUtaXRlbSIKICAgICAgICAgICAgOmNsYXNzPSJbCiAgICAgICAgICAgICAgaXNBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnLAogICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmUgJiYgJ21lbnUtaXRlbS1hY3RpdmUnCiAgICAgICAgICAgIF0iCiAgICAgICAgICA+CiAgICAgICAgICAgIDxhIDpocmVmPSJocmVmIiBjbGFzcz0ibWVudS1saW5rIiBAY2xpY2s9Im5hdmlnYXRlIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWVudS1idWxsZXQgbWVudS1idWxsZXQtZG90Ij4KICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGV4dCI+V2l6YXJkIDQ8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgPC91bD4KICAgIDwvZGl2PgogIDwvbGk+IC0tPgo8L3VsPgo="},null]}